// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package database

import (
	"context"
	"time"
)

const userCreate = `-- name: UserCreate :one
INSERT INTO Users ( id, created_at, updated_at, name, api_key ) 
VALUES (?, ?, ?, ?, ?)
RETURNING id, created_at, updated_at, name, api_key
`

type UserCreateParams struct {
	ID        int64
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
	ApiKey    string
}

func (q *Queries) UserCreate(ctx context.Context, arg UserCreateParams) (User, error) {
	row := q.db.QueryRowContext(ctx, userCreate,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.ApiKey,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.ApiKey,
	)
	return i, err
}

const userGet = `-- name: UserGet :one
SELECT id, created_at, updated_at, name, api_key FROM Users
WHERE api_key is ?
`

func (q *Queries) UserGet(ctx context.Context, apiKey string) (User, error) {
	row := q.db.QueryRowContext(ctx, userGet, apiKey)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.ApiKey,
	)
	return i, err
}
